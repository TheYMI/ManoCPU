
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jul 18 11:41:38 IDT 2013
//----------------------------------------------------

package Parser;

import Emulator.Global.Constants;
import javax.swing.*;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jul 18 11:41:38 IDT 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\004\000\002\002\002\000\002\011" +
    "\004\000\002\011\004\000\002\003\007\000\002\004\006" +
    "\000\002\006\005\000\002\006\003\000\002\007\007\000" +
    "\002\007\006\000\002\005\004\000\002\005\003\000\002" +
    "\010\005\000\002\010\005\000\002\015\004\000\002\015" +
    "\003\000\002\016\011\000\002\016\003\000\002\016\003" +
    "\000\002\012\006\000\002\013\004\000\002\013\003\000" +
    "\002\014\012\000\002\034\002\000\002\017\006\000\002" +
    "\035\002\000\002\017\006\000\002\036\002\000\002\017" +
    "\006\000\002\037\002\000\002\017\005\000\002\017\003" +
    "\000\002\020\004\000\002\020\004\000\002\020\006\000" +
    "\002\040\002\000\002\021\006\000\002\021\003\000\002" +
    "\041\002\000\002\022\005\000\002\042\002\000\002\043" +
    "\002\000\002\022\013\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\024\013\000\002\024\011\000\002\024" +
    "\012\000\002\024\010\000\002\024\005\000\002\044\002" +
    "\000\002\024\006\000\002\025\007\000\002\045\002\000" +
    "\002\026\012\000\002\046\002\000\002\026\013\000\002" +
    "\047\002\000\002\026\013\000\002\050\002\000\002\026" +
    "\015\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\027\003\000\002\031\003" +
    "\000\002\031\003\000\002\032\003\000\002\032\003\000" +
    "\002\033\007\000\002\033\005\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\006\004\005\006\004\001\002\000\004\030" +
    "\060\001\002\000\004\030\014\001\002\000\004\002\013" +
    "\001\002\000\004\006\004\001\002\000\004\004\005\001" +
    "\002\000\004\002\ufffe\001\002\000\004\002\uffff\001\002" +
    "\000\004\002\001\001\002\000\004\005\016\001\002\000" +
    "\004\071\035\001\002\000\004\026\017\001\002\000\004" +
    "\032\021\001\002\000\006\027\ufffa\040\ufffa\001\002\000" +
    "\006\033\027\071\026\001\002\000\006\027\024\040\023" +
    "\001\002\000\004\032\021\001\002\000\004\071\ufffc\001" +
    "\002\000\006\027\ufffb\040\ufffb\001\002\000\004\033\032" +
    "\001\002\000\004\021\030\001\002\000\004\072\031\001" +
    "\002\000\006\027\ufff8\040\ufff8\001\002\000\004\021\033" +
    "\001\002\000\004\072\034\001\002\000\006\027\ufff9\040" +
    "\ufff9\001\002\000\004\022\042\001\002\000\006\031\ufff6" +
    "\071\ufff6\001\002\000\006\031\041\071\035\001\002\000" +
    "\006\031\ufff7\071\ufff7\001\002\000\006\002\ufffd\006\ufffd" +
    "\001\002\000\012\007\046\043\047\044\050\072\044\001" +
    "\002\000\014\007\046\031\ufff5\043\047\044\050\071\ufff5" +
    "\001\002\000\006\031\ufff4\071\ufff4\001\002\000\014\007" +
    "\ufff2\031\ufff2\043\ufff2\044\ufff2\071\ufff2\001\002\000\004" +
    "\026\051\001\002\000\014\007\ufff0\031\ufff0\043\ufff0\044" +
    "\ufff0\071\ufff0\001\002\000\014\007\uffef\031\uffef\043\uffef" +
    "\044\uffef\071\uffef\001\002\000\004\070\052\001\002\000" +
    "\004\027\053\001\002\000\004\034\054\001\002\000\004" +
    "\070\055\001\002\000\004\035\056\001\002\000\014\007" +
    "\ufff1\031\ufff1\043\ufff1\044\ufff1\071\ufff1\001\002\000\014" +
    "\007\ufff3\031\ufff3\043\ufff3\044\ufff3\071\ufff3\001\002\000" +
    "\004\073\061\001\002\000\004\070\066\001\002\000\006" +
    "\031\064\073\061\001\002\000\006\031\uffec\073\uffec\001" +
    "\002\000\006\002\uffee\004\uffee\001\002\000\006\031\uffed" +
    "\073\uffed\001\002\000\004\034\067\001\002\000\012\007" +
    "\074\023\072\034\073\071\070\001\002\000\014\012\266" +
    "\024\000\025\000\032\151\035\000\001\002\000\010\024" +
    "\104\025\105\035\114\001\002\000\012\007\uffe4\023\uffe4" +
    "\034\uffe4\071\uffe4\001\002\000\012\007\uffea\023\uffea\034" +
    "\uffea\071\uffea\001\002\000\004\034\076\001\002\000\010" +
    "\024\uffe2\025\uffe2\035\uffe2\001\002\000\004\070\077\001" +
    "\002\000\004\035\100\001\002\000\010\024\uffdf\025\uffdf" +
    "\035\uffdf\001\002\000\012\007\074\023\072\034\073\071" +
    "\070\001\002\000\010\024\104\025\105\035\103\001\002" +
    "\000\010\024\uffe9\025\uffe9\035\uffe9\001\002\000\012\007" +
    "\uffe8\023\uffe8\034\uffe8\071\uffe8\001\002\000\012\007\uffe6" +
    "\023\uffe6\034\uffe6\071\uffe6\001\002\000\012\007\074\023" +
    "\072\034\073\071\070\001\002\000\010\024\104\025\uffe5" +
    "\035\uffe5\001\002\000\012\007\074\023\072\034\073\071" +
    "\070\001\002\000\010\024\uffe7\025\uffe7\035\uffe7\001\002" +
    "\000\012\007\074\023\072\034\073\071\070\001\002\000" +
    "\010\024\104\025\105\035\uffe3\001\002\000\004\037\115" +
    "\001\002\000\016\007\117\015\127\016\121\017\122\026" +
    "\120\071\126\001\002\000\010\031\uffd5\036\uffd5\040\uffd5" +
    "\001\002\000\004\021\261\001\002\000\004\071\210\001" +
    "\002\000\010\031\uffd2\036\uffd2\040\uffd2\001\002\000\004" +
    "\034\200\001\002\000\010\031\uffd4\036\uffd4\040\uffd4\001" +
    "\002\000\006\036\175\040\174\001\002\000\010\031\uffdc" +
    "\036\uffdc\040\uffdc\001\002\000\016\010\uffdb\011\uffdb\013" +
    "\uffdb\014\uffdb\020\131\032\132\001\002\000\010\031\uffd3" +
    "\036\uffd3\040\uffd3\001\002\000\010\031\uffd6\036\uffd6\040" +
    "\uffd6\001\002\000\006\026\uffc8\071\163\001\002\000\004" +
    "\070\141\001\002\000\012\010\136\011\140\013\134\014" +
    "\137\001\002\000\010\031\uffcf\036\uffcf\040\uffcf\001\002" +
    "\000\010\031\uffda\036\uffda\040\uffda\001\002\000\010\031" +
    "\uffd1\036\uffd1\040\uffd1\001\002\000\010\031\uffce\036\uffce" +
    "\040\uffce\001\002\000\010\031\uffd0\036\uffd0\040\uffd0\001" +
    "\002\000\006\033\142\042\143\001\002\000\004\020\160" +
    "\001\002\000\004\070\144\001\002\000\004\033\145\001" +
    "\002\000\004\020\146\001\002\000\004\071\147\001\002" +
    "\000\012\031\000\032\151\036\000\040\000\001\002\000" +
    "\010\031\uffcd\036\uffcd\040\uffcd\001\002\000\004\070\153" +
    "\001\002\000\016\024\uffa8\025\uffa8\031\uffa8\035\uffa8\036" +
    "\uffa8\040\uffa8\001\002\000\006\033\154\042\155\001\002" +
    "\000\016\024\uffa9\025\uffa9\031\uffa9\035\uffa9\036\uffa9\040" +
    "\uffa9\001\002\000\004\070\156\001\002\000\004\033\157" +
    "\001\002\000\016\024\uffaa\025\uffaa\031\uffaa\035\uffaa\036" +
    "\uffaa\040\uffaa\001\002\000\004\071\161\001\002\000\012" +
    "\031\000\032\151\036\000\040\000\001\002\000\010\031" +
    "\uffcc\036\uffcc\040\uffcc\001\002\000\012\031\uffc9\032\166" +
    "\036\uffc9\040\uffc9\001\002\000\004\026\120\001\002\000" +
    "\010\031\uffc7\036\uffc7\040\uffc7\001\002\000\004\070\167" +
    "\001\002\000\006\033\170\042\171\001\002\000\010\031" +
    "\uffca\036\uffca\040\uffca\001\002\000\004\070\172\001\002" +
    "\000\004\033\173\001\002\000\010\031\uffcb\036\uffcb\040" +
    "\uffcb\001\002\000\016\007\uffde\015\uffde\016\uffde\017\uffde" +
    "\026\uffde\071\uffde\001\002\000\006\031\uffeb\073\uffeb\001" +
    "\002\000\016\007\117\015\127\016\121\017\122\026\120" +
    "\071\126\001\002\000\010\031\uffdd\036\uffdd\040\uffdd\001" +
    "\002\000\012\007\uffd9\023\uffd9\034\uffd9\071\uffd9\001\002" +
    "\000\012\007\074\023\072\034\073\071\070\001\002\000" +
    "\010\024\104\025\105\035\203\001\002\000\004\030\204" +
    "\001\002\000\016\007\uffd8\015\uffd8\016\uffd8\017\uffd8\026" +
    "\uffd8\071\uffd8\001\002\000\016\007\117\015\127\016\121" +
    "\017\122\026\120\071\126\001\002\000\006\031\207\040" +
    "\174\001\002\000\010\031\uffd7\036\uffd7\040\uffd7\001\002" +
    "\000\004\037\211\001\002\000\006\070\213\071\212\001" +
    "\002\000\036\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5" +
    "\056\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\065" +
    "\uffc5\066\uffc5\067\uffc5\001\002\000\004\037\214\001\002" +
    "\000\006\057\uffc1\071\215\001\002\000\010\047\uffbf\050" +
    "\uffbf\057\uffc3\001\002\000\004\057\217\001\002\000\006" +
    "\027\uffaf\071\uffaf\001\002\000\004\071\221\001\002\000" +
    "\004\027\222\001\002\000\010\031\uffc0\036\uffc0\040\uffc0" +
    "\001\002\000\004\057\217\001\002\000\006\047\226\050" +
    "\225\001\002\000\006\045\uffad\046\uffad\001\002\000\006" +
    "\045\uffae\046\uffae\001\002\000\006\045\231\046\232\001" +
    "\002\000\004\070\233\001\002\000\004\070\uffac\001\002" +
    "\000\004\070\uffab\001\002\000\004\027\234\001\002\000" +
    "\010\031\uffbe\036\uffbe\040\uffbe\001\002\000\004\027\236" +
    "\001\002\000\010\031\uffc2\036\uffc2\040\uffc2\001\002\000" +
    "\036\051\240\052\247\053\245\054\252\055\256\056\241" +
    "\060\242\061\251\062\244\063\246\064\254\065\253\066" +
    "\255\067\250\001\002\000\004\071\uffbd\001\002\000\004" +
    "\071\uffb8\001\002\000\004\071\uffb7\001\002\000\004\071" +
    "\257\001\002\000\004\071\uffb5\001\002\000\004\071\uffbb" +
    "\001\002\000\004\071\uffb4\001\002\000\004\071\uffbc\001" +
    "\002\000\004\071\uffb0\001\002\000\004\071\uffb6\001\002" +
    "\000\004\071\uffba\001\002\000\004\071\uffb2\001\002\000" +
    "\004\071\uffb3\001\002\000\004\071\uffb1\001\002\000\004" +
    "\071\uffb9\001\002\000\004\027\260\001\002\000\010\031" +
    "\uffc4\036\uffc4\040\uffc4\001\002\000\004\041\262\001\002" +
    "\000\004\071\263\001\002\000\012\031\000\032\151\036" +
    "\000\040\000\001\002\000\010\031\uffc6\036\uffc6\040\uffc6" +
    "\001\002\000\010\024\uffe1\025\uffe1\035\uffe1\001\002\000" +
    "\010\024\uffe0\025\uffe0\035\uffe0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\010\003\006\011\005\012\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\011\001\001\000\004\003\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\014" +
    "\001\001\000\006\005\036\010\035\001\001\000\002\001" +
    "\001\000\006\006\021\007\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\042\016\044" +
    "\001\001\000\004\016\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\061\014\062\001\001\000" +
    "\002\001\001\000\004\014\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\070\020\074\001\001\000\006\002\151\033\264" +
    "\001\001\000\002\001\001\000\004\037\111\001\001\000" +
    "\004\034\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\101\020\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\107\001\001\000\004\036\105\001" +
    "\001\000\006\017\106\020\074\001\001\000\002\001\001" +
    "\000\006\017\110\020\074\001\001\000\002\001\001\000" +
    "\006\017\112\020\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\021\123\022\124\024\115\025\122\026" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\163\001\001\000\002\001\001\000\004\023\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\151\033\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\151\033\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\175\001" +
    "\001\000\002\001\001\000\012\022\176\024\115\025\122" +
    "\026\127\001\001\000\002\001\001\000\004\042\200\001" +
    "\001\000\006\017\201\020\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\204\001\001\000\014\021" +
    "\205\022\124\024\115\025\122\026\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\236\001\001\000\002\001\001\000\004" +
    "\047\215\001\001\000\006\046\222\050\223\001\001\000" +
    "\004\027\217\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\234\001" +
    "\001\000\004\031\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\242\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\151\033\263\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	String mTemplateName = "Default";

	List<String> accessModes = new ArrayList<String>();
	String noAccessMode;
	List<String> dinamicCommands = new ArrayList<String>();
	List<String> staticCommands = new ArrayList<String>();
	
	String[] timestampsCode = new String[Constants.TIMER_LIMIT];
	String cycleDescription = "";
	String cycleDescriptionRange = "";
	String cycleDescriptionCondition = "";
	List<String> sameTimeMoves = new ArrayList<String>();

	public void report_error(String message, Object info){

		StringBuffer m = new StringBuffer("Error");

		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {
				m.append(" in line "+(s.left+1));
				if (s.right >= 0)
					m.append(", column "+(s.right+1));
			}
		}

		m.append(" : "+message);
		JOptionPane.showMessageDialog(null, m + "\n");

	}

	public void report_fatal_error(String message, Object info){
		report_error(message, info);
		throw new Error("Syntax Error");
	}

	public void set_mTemplateName(String templateName){
		mTemplateName = templateName;
	}
	
	public void print_assembler_class(){
	
		DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		DateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");
		Date date			  = new Date();
		String filename       = "Machines\\" + mTemplateName + "\\" + mTemplateName + "Assembler.java";
		
		String classContent = "package Assembler;\n\n" + 
		                      "import javax.swing.*;\n" + 
		                      "import java.io.FileNotFoundException;\n" + 
		                      "import java.io.FileReader;\n\n" + 
		                      "/**\n" + 
		                      " * **********************\n" + 
		                      " * Created By: Yuval Tzur\n" + 
		                      " * Date: " + dateFormat.format(date) + "\n" + 
		                      " * Time: " + timeFormat.format(date) + "\n" + 
		                      " * Description: This class will assemble assembly code into binary code.\n" + 
		                      " *              This will create the file Program.dat, from which the emulator will load the program.\n" + 
		                      " * ***********************\n" + 
		                      " */\n\n" + 
		                      "public class " + mTemplateName + "Assembler implements iAssembler {\n\n" + 
		                      "    public " + mTemplateName + "Assembler() { /* Do nothing */ }\n\n" + 
		                      "    public void assemble(){\n\n" + 
		                      "        String  filename = \"appData\\\\Program.dat\";\n\n" + 
		                      "        try {\n\n" + 
		                      "            FileReader inputFile = new FileReader(filename);\n" + 
		                      "            Lexer      lexer     = new Lexer(inputFile);\n" + 
		                      "            " + mTemplateName + "Parser     assembler = new " + mTemplateName + "Parser(lexer);\n\n" + 
		                      "            assembler.parse();\n\n" + 
		                      "        } catch (FileNotFoundException fnf){\n" + 
		                      "            JOptionPane.showMessageDialog(null, \"ERROR: Could not open \" + filename + \" for reading!\");\n" + 
		                      "        } catch (Exception e) {\n" + 
		                      "            JOptionPane.showMessageDialog(null, \"ERROR: \" + e.getLocalizedMessage());\n" + 
		                      "        } catch (Error e) {\n" + 
		                      "            JOptionPane.showMessageDialog(null, \"ERROR: \" + e.getLocalizedMessage());\n" + 
		                      "        }\n\n" + 
		                      "    }\n\n" + 
		                      "}";

		try {
			FileWriter outFile = new FileWriter(filename);
			BufferedWriter out = new BufferedWriter(outFile);
			out.write(classContent);
			out.close();
		}catch (Exception e){//Catch exception if any
			JOptionPane.showMessageDialog(null, "ERROR: Could not write content to " + filename + "!");
		}
		
		
	}

	
	public void print_to_assembler_file(String content){
		String filename = "Machines\\" + mTemplateName + "\\Assembler.cup";
		try {
			FileWriter outFile = new FileWriter(filename);
			BufferedWriter out = new BufferedWriter(outFile);
			out.write(content);
			out.close();
		}catch (Exception e){//Catch exception if any
			JOptionPane.showMessageDialog(null, "ERROR: Could not write content to " + filename + "!");
		}
	}

	public String get_assembler_file_header(){
		return "package Assembler;\n" +
			   "\n" +
			   "import Emulator.Components.AddressRegister;\n" +
			   "import Emulator.Global.Constants;\n" +
			   "import Emulator.Global.Value;\n" +
			   "import javax.swing.*;\n" +
			   "import java.io.BufferedWriter;\n" +
			   "import java.io.File;\n" +
			   "import java.io.FileWriter;\n" +
			   "import java.util.ArrayList;\n" +
			   "import java.util.HashMap;\n" +
			   "import java.util.List;\n" +
			   "import java.util.regex.Matcher;\n" +
			   "import java.util.regex.Pattern;\n" +
			   "\n" +
			   "parser code {" + ":\n" +
			   "\n" +
			   "    AddressRegister address = new AddressRegister(0, \"\");\n" +
			   "    List<String> progLines = new ArrayList<String>();\n" +
			   "    HashMap<String, String> tagTable = new HashMap<String, String>();\n" +
			   "    String accessMode;\n" +
			   "\n" +
			   "	public void report_error(String message, Object info){\n" +
			   "\n" +
			   "		StringBuffer m = new StringBuffer(\"Error\");\n" +
			   "\n" +
			   "		if (info instanceof java_cup.runtime.Symbol) {\n" +
			   "			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);\n" +
			   "			if (s.left >= 0) {\n" +
			   "				m.append(\" in line \"+(s.left+1));\n" +
			   "				if (s.right >= 0)\n" +
			   "					m.append(\", column \"+(s.right+1));\n" +
			   "			}\n" +
			   "		}\n" +
			   "\n" +
			   "		m.append(\" : \"+message);\n" +
			   "        JOptionPane.showMessageDialog(null, m + \"\\n\");\n" +
			   "\n" +
			   "	}\n" +
			   "\n" +
			   "	public void report_fatal_error(String message, Object info){\n" +
			   "		report_error(message, info);\n" +
			   "		throw new Error(\"Syntax Error\");\n" +
			   "	}\n" +
			   "    \n" +
			   "    public void print_to_files(String program, String varTable){\n" +
			   "        String filename = \"appData\\\\Program.csv\";\n" +
			   "        try {\n" +
			   "            FileWriter outFile = new FileWriter(filename);\n" +
			   "            BufferedWriter out = new BufferedWriter(outFile);\n" +
			   "            out.write(program);\n" +
			   "            out.close();\n" +
			   "        }catch (Exception e){//Catch exception if any\n" +
			   "            JOptionPane.showMessageDialog(null, \"ERROR: Could not write program to \" + filename + \"!\");\n" +
			   "        }\n\n" +
			   "        filename = \"appData\\\\VarTable.csv\";\n" +
			   "        try {\n" +
			   "            FileWriter outFile = new FileWriter(filename);\n" +
			   "            BufferedWriter out = new BufferedWriter(outFile);\n" +
			   "            out.write(varTable);\n" +
			   "            out.close();\n" +
			   "        }catch (Exception e){//Catch exception if any\n" +
			   "            JOptionPane.showMessageDialog(null, \"ERROR: Could not write variable table to \" + filename + \"!\");\n" +
			   "        }\n" +
			   "    }\n" +
			   "    \n" +
			   "    public String get_program_code(){\n" +
			   "    \n" +
			   "        String content = \"\";\n" +
			   "        String[] lines = progLines.toArray(new String[progLines.size()]);\n" +
			   "		Pattern p = Pattern.compile(\"<([A-Za-z_][A-Za-z_0-9]*)>\");\n" +
			   "		Matcher m;\n" +
			   "        \n" +
			   "        for (int i = 0; i < lines.length; ++i){\n" +
			   "			m = p.matcher(lines[i]);\n" +
			   "			if (m.find()){\n" +
			   "				String tagAddress = tagTable.get(m.group(1));\n" +
			   "				lines[i] = lines[i].replaceAll(\"<([A-Za-z_][A-Za-z_0-9]*)>\", tagAddress);\n" +
			   "			}\n" +
			   "			String[] values = lines[i].split(\",\");\n" +
			   "			content += Value.toHexadecimal(values[0]) + \",\" + Value.toHexadecimal(values[1]) + \",\" + values[2] + \"\\r\\n\";\n" +
			   "        }\n" +
			   "		\n" +
			   "		return content;\n" +
			   "        \n" +
			   "    }\n" +
			   "\n" +
			   "    public String get_varTable_code(){\n" +
			   "    \n" +
			   "        String content = \"\";\n" +
			   "        \n" +
			   "        for (String h : tagTable.keySet()){\n" +
			   "			content += h + \",\" + tagTable.get(h) + \"\\n\";\n" +
			   "        }\n" +
			   "		\n" +
			   "		return content;\n" +
			   "        \n" +
			   "    }\n" +
			   "\n" +
			   ":" + "};\n" +
			   "\n" +
			   "terminal ORG, END;\n" +
			   "terminal HEX, DEC, BIN;\n" +
			   "terminal COMMA, NEGATIVE, NEWLINE;\n" +
			   "\n" +
			   "terminal String  ID, NUMBER;\n" +
			   "\n" +
			   "non terminal Object epsilon;\n" +
			   "non terminal Object program, command_list, command_line;\n" +
			   "non terminal Object tag_declaration, var_declaration, operation;\n" +
			   "non terminal String number, access_mode;\n" +
			   "\n" +
			   "start with program;\n" +
			   "\n" +
			   "epsilon ::= {" + ": /* Empty statement */ :" + "} ;\n" +
			   "\n" +
			   "program ::= command_list:cl END\n" +
			   "		  {" + ": parser.print_to_files(parser.get_program_code(), parser.get_varTable_code()); :" + "} ;\n" +
			   "\n" +
			   "command_list ::= command_list command_line |\n" +
			   "				 command_line ;\n" +
			   "\n" +
			   "command_line ::= tag_declaration operation NEWLINE\n" +
			   "                 {" + ": parser.address.enableWrite(); parser.address.increment(); parser.address.update(); :" + "} |\n" +
			   "                 tag_declaration var_declaration NEWLINE\n" +
			   "                 {" + ": parser.address.enableWrite(); parser.address.increment(); parser.address.update(); :" + "} |\n" +
			   "                 var_declaration NEWLINE\n" +
			   "                 {" + ": parser.address.enableWrite(); parser.address.increment(); parser.address.update(); :" + "} |\n" +
			   "                 operation NEWLINE\n" +
			   "                 {" + ": parser.address.enableWrite(); parser.address.increment(); parser.address.update(); :" + "} |\n" +
			   "                 ORG NUMBER:n NEWLINE\n" +
			   "                 {" + ": parser.address.enableWrite(); parser.address.set_value(new Value(n)); parser.address.update(); :" + "} |\n" +
			   "                 NEWLINE\n" +
			   "                 {" + ": /* Do nothing */ :" + "} ;\n" +
			   "\n" +
			   "tag_declaration ::= ID:id COMMA\n" +
			   "					{" + ": parser.tagTable.put(id, parser.address.get_value().toString()); :" + "} ;\n" +
			   "                   \n" +
			   "var_declaration ::= number:n\n" +
			   "					{" + ": String line = parser.address.get_value().toString() + \",\" + n + \",\" + \" \"; parser.progLines.add(line); :" + "} ;\n\n" +
			   "number ::= HEX NUMBER:n\n" +
			   "           {" + ": RESULT = new Value(n).toString(); :" + "} |\n" +
			   "		   HEX NEGATIVE NUMBER:n\n" +
			   "		   {" + ": Value val = new Value(n); val.complement(); val.increment(); RESULT = val.toString(); :" + "} |\n" +
			   "		   DEC NUMBER:n\n" +
			   "		   {" + ": RESULT = new Value(Constants.DATA_REGISTER_SIZE, new Integer(n)).toString(); :" + "} |\n" +
			   "		   DEC NEGATIVE NUMBER:n\n" +
			   "		   {" + ": Value val = new Value(Constants.DATA_REGISTER_SIZE, new Integer(n)); val.complement(); val.increment(); RESULT = val.toString(); :" + "} |\n" +
			   "		   BIN NUMBER:n\n" +
			   "		   {" + ": RESULT = n; :" + "} ;\n" +
			   "\n";
	}

	public String get_assembler_access_modes(){
	
		String[] lines = accessModes.toArray(new String[accessModes.size()]);
		String content = "";
		
		content = "access_mode ::= ID:id\n				{" + ":\n";
		for (int i = 0; i < lines.length; ++i){
			content += "				  " + lines[i] + "\n";
		}
		content += "				  if (RESULT == null) { throw new Error(\"Illegal Access Mode \" + id + \"!\"); }\n" + 
				   "				:" + "} |\n" +
				   "				epsilon\n" +
				   "				{" + ": parser.accessMode = \"\"; RESULT = \"" + noAccessMode + "\"; :" + "} ;";
		
		return content;
	}
	
	public String get_assembler_commands(){
	
		String[] dinamicLines = dinamicCommands.toArray(new String[dinamicCommands.size()]);
		String[] staticLines = staticCommands.toArray(new String[staticCommands.size()]);
		String content = "";
		
		content = "operation ::= ID:command ID:tag access_mode:am\n" +
				  "			  {" + ":\n" +
				  "				String line = parser.address.get_value().toString() + \",\";\n";
		for (int i = 0; i < dinamicLines.length; ++i){
			content += "				" + dinamicLines[i] + "\n";
		}
		content+= "				if (line.charAt(line.length() - 1) == ','){\n" +
				  "					throw new Error(\"Illegal command '\" + command + \"'\");\n" +
				  "				}\n" +
				  "				line += \",\" + command + \" \" + tag + \" \" + parser.accessMode;\n" +
				  "				parser.progLines.add(line);\n" +
				  "			  :" + "} |\n" +
				  "			  ID:command\n" +
				  "			  {" + ":\n" +
				  "				String line = parser.address.get_value().toString() + \",\";\n";
		for (int i = 0; i < staticLines.length; ++i){
			content += "				" + staticLines[i] + "\n";
		}
		content+= "				if (line.charAt(line.length() - 1) == ','){\n" +
				  "					throw new Error(\"Illegal command '\" + command + \"'\");\n" +
				  "				}\n" +
				  "				line += \",\" + command;\n" +
				  "				parser.progLines.add(line);\n" +
				  "			  :" + "} ;";
		
		return content;
	}
	
	public String get_assembler_file_content(){
	
		String content = new String();
		
		content = get_assembler_access_modes() + "\n\n";
		content += get_assembler_commands();
		
		return content;
	}

	public String get_assembler_file_code(){
		
		String code = new String();
		
		code += get_assembler_file_header();
		code += get_assembler_file_content();
		
		return code;
		
	}
	
	public void print_to_instructions_file(String content){
		String filename = "Machines\\" + mTemplateName + "\\" + mTemplateName + "UCode.java";
		try {
			FileWriter outFile = new FileWriter(filename);
			BufferedWriter out = new BufferedWriter(outFile);
			out.write(content);
			out.close();
		}catch (Exception e){//Catch exception if any
			JOptionPane.showMessageDialog(null, "ERROR: Could not write content to " + filename + "!");
		}
	}
	
	public String get_instructions_file_comments(){
		DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		DateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");
		Date date			 = new Date();

		return "/**\n * **********************\n" +
		       " * Date: " + dateFormat.format(date) + "\n " +
		       "* Time: " + timeFormat.format(date) + "\n " +
		       "* Description: This class is an auto-generated instruction set implementation.\n " +
		       "* ***********************\n */";
	}
	
	public String get_instructions_file_header(){
		return "package Emulator.Global;\n\n" +
		       "public class " + mTemplateName + "UCode implements iInstructionsUCode, Constants {\n\n" +
		       "    // Members:\n    Processor mCPU;\n    String mCycleDescription;\n\n" +
		       "    // Constructor:\n    public " + mTemplateName + "UCode(){ /* Does nothing. */}\n\n" +
		       "    public void setCPU(Processor CPU){\n        mCPU = CPU;\n    }";
	}
	
	public String get_instructions_file_footer(){
		return "}";
	}
	
	public String get_instructions_file_content(){
	
		String content = new String();
		
		for (int i = 0; i < Constants.TIMER_LIMIT; ++i){
			content += "    // Defines micro instructions for t" + i + ".\n";
			content += "    public String t" + i + "(){\n\n";
			content += "        mCycleDescription = \"\";\n\n";
			content += timestampsCode[i] + "\n";
			content += "        mCPU.nextCycle();\n";
			content += "        return mCycleDescription;\n\n    }\n\n";
		}
		
		return content;
		
	}
	
	public String get_instructions_file_code(){
	
		String code = new String();
		
		code = get_instructions_file_comments() + "\n\n";
		code += get_instructions_file_header() + "\n\n";
		code += get_instructions_file_content();
		code += get_instructions_file_footer();
		
		return code;
		
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // range ::= epsilon 
            {
              String RESULT =null;
		 parser.cycleDescriptionRange = ""; RESULT = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("range",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // range ::= L_SQUARE NUMBER R_SQUARE 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cycleDescriptionRange = "[" + n + "]"; RESULT = "" + n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("range",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // range ::= L_SQUARE NUMBER HYPHEN NUMBER R_SQUARE 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cycleDescriptionRange = "[" + n1 + "-" + n2 + "]"; RESULT = n1 + ", " + n2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("range",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // alu_shift_filler ::= ALU_FILL_ONE 
            {
              String RESULT =null;
		 parser.cycleDescription += "(1)` "; RESULT = "1"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alu_shift_filler",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // alu_shift_filler ::= ALU_FILL_ZERO 
            {
              String RESULT =null;
		 parser.cycleDescription += "(0)` "; RESULT = "0"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alu_shift_filler",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // alu_shift_side ::= ALU_R_SHIFT 
            {
              String RESULT =null;
		 parser.cycleDescription += " `>>"; RESULT = "Right"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alu_shift_side",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // alu_shift_side ::= ALU_L_SHIFT 
            {
              String RESULT =null;
		 parser.cycleDescription += " `<<"; RESULT = "Left"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alu_shift_side",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // alu_o_op ::= ALU_NOT 
            {
              String RESULT =null;
		 parser.cycleDescription += " `~` "; RESULT = "complement"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alu_o_op",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // alu_b_op ::= ALU_MOD 
            {
              String RESULT =null;
		 parser.cycleDescription += " `%` "; RESULT = "modulo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alu_b_op",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // alu_b_op ::= ALU_DIV 
            {
              String RESULT =null;
		 parser.cycleDescription += " `/` "; RESULT = "divide"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alu_b_op",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // alu_b_op ::= ALU_MULT 
            {
              String RESULT =null;
		 parser.cycleDescription += " `*` "; RESULT = "multiply"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alu_b_op",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // alu_b_op ::= ALU_SUB 
            {
              String RESULT =null;
		 parser.cycleDescription += " `-` "; RESULT = "subtract"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alu_b_op",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // alu_b_op ::= ALU_SUM 
            {
              String RESULT =null;
		 parser.cycleDescription += " `+` "; RESULT = "sum"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alu_b_op",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // alu_b_op ::= ALU_XOR 
            {
              String RESULT =null;
		 parser.cycleDescription += " `^` "; RESULT = "xor"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alu_b_op",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // alu_b_op ::= ALU_OR 
            {
              String RESULT =null;
		 parser.cycleDescription += " `|` "; RESULT = "or"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alu_b_op",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // alu_b_op ::= ALU_AND 
            {
              String RESULT =null;
		 parser.cycleDescription += " `&` "; RESULT = "and"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alu_b_op",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // alu_b_op ::= ALU_LE 
            {
              String RESULT =null;
		 parser.cycleDescription += " `<=` "; RESULT = "lessOrEqual"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alu_b_op",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // alu_b_op ::= ALU_GE 
            {
              String RESULT =null;
		 parser.cycleDescription += " `>=` "; RESULT = "greaterOrEqual"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alu_b_op",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // alu_b_op ::= ALU_LS 
            {
              String RESULT =null;
		 parser.cycleDescription += " `<` "; RESULT = "lessThan()"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alu_b_op",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // alu_b_op ::= ALU_GR 
            {
              String RESULT =null;
		 parser.cycleDescription += " `>` "; RESULT = "greaterThan"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alu_b_op",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // alu_b_op ::= ALU_NE 
            {
              String RESULT =null;
		 parser.cycleDescription += " `!=` "; RESULT = "notEqual"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alu_b_op",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // alu_b_op ::= ALU_EQ 
            {
              String RESULT =null;
		 parser.cycleDescription += " `==` "; RESULT = "equal"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alu_b_op",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // alu_command ::= L_TRIANGULAR ID COLON NUMBER COLON ID NT$12 alu_shift_side alu_shift_filler NUMBER R_TRIANGULAR 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aluleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aluright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String alu = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int inpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int inpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Integer inp = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int assleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int assright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ass = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int asfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int asfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String asf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bitsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bitsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer bits = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cycleDescription += bits + ">"; RESULT = "            mCPU.moveData(" + op + ", " + alu + ");\n            mCPU.mComponentsList[" + alu + "].shift" + ass + inp + "(" + bits + ", _" + asf + ");\n            mCPU.moveData(" + alu + ", " + op + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alu_command",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$12 ::= 
            {
              String RESULT =null;
		int aluleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aluright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String alu = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int inpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int inpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer inp = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 parser.cycleDescription += "<" + alu + ":" + inp + ":" + op; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // alu_command ::= L_TRIANGULAR ID COLON NUMBER COLON NT$11 alu_o_op ID R_TRIANGULAR 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aluleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aluright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String alu = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ao = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cycleDescription += op + ">"; RESULT = "            mCPU.moveData(" + op + ", " + alu + ");\n            mCPU.mComponentsList[" + alu + "]." + ao + n + "();\n            mCPU.moveData(" + alu + ", "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alu_command",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$11 ::= 
            {
              String RESULT =null;
		int aluleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aluright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String alu = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 parser.cycleDescription += "<" + alu + ":" + n + ":"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // alu_command ::= L_TRIANGULAR ID COLON NUMBER COLON ID NT$10 alu_o_op R_TRIANGULAR 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aluleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aluright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String alu = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ao = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cycleDescription += ">"; RESULT = "            mCPU.moveData(" + op + ", " + alu + ");\n            mCPU.mComponentsList[" + alu + "]." + ao + n + "();\n            mCPU.moveData(" + alu + ", "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alu_command",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$10 ::= 
            {
              String RESULT =null;
		int aluleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aluright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String alu = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 parser.cycleDescription += "<" + alu + ":" + n + ":" + op; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // alu_command ::= L_TRIANGULAR ID COLON ID NT$9 alu_b_op ID R_TRIANGULAR 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aluleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aluright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String alu = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ao = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cycleDescription += op2 + ">"; RESULT = "            mCPU.moveData(" + op2 + ", " + alu + ");\n            mCPU.moveData(" + op1 + ", " + alu + ");\n            mCPU.mComponentsList[" + alu + "]." + ao + "();\n            mCPU.moveData(" + alu + ", "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alu_command",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$9 ::= 
            {
              String RESULT =null;
		int aluleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aluright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String alu = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 parser.cycleDescription += "<" + alu + ":" + op1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // asign_op_code ::= OPCODE E_ASSIGN DECIMAL ID range 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.cycleDescription += "Op-Code = " + id + parser.cycleDescriptionRange; RESULT = "            mCPU.set_opCode(mCPU.mComponentsList[" + id + "].get_decimal(" + r + "))"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asign_op_code",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // move ::= ID A_ASSIGN NT$8 alu_command 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ac = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			RESULT = ac + id + ")";
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("move",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$8 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 parser.cycleDescription += id + " <- "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // move ::= ID A_ASSIGN ID 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cycleDescription += id1 + " <- " + id2;
			RESULT = "            mCPU.moveData(" + id2 + ", " + id1 + ")";
			parser.sameTimeMoves.add(id1 + " <- " + id2);
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("move",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // move ::= ID A_ASSIGN ID L_SQUARE NUMBER R_SQUARE 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
			parser.cycleDescription += id1 + " <- " + id2 + "[" + n + "]";
			RESULT = "            mCPU.moveData(mCPU.mComponentsList[" + id2 + "].get_value(" + n + "), " + id1 + ")";
			parser.sameTimeMoves.add(id1 + " <- " + id2 + "[" + n + "]");
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("move",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // move ::= ID A_ASSIGN ID L_SQUARE NUMBER HYPHEN NUMBER R_SQUARE 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
			parser.cycleDescription += id1 + " <- " + id2 + "[" + n1 + "-" + n2 + "]";
			RESULT = "            mCPU.moveData(mCPU.mComponentsList[" + id2 + "].get_value(" + n1 + ", " + n2 + "), " + id1 + ")";
			parser.sameTimeMoves.add(id1 + " <- " + id2 + "[" + n1 + "-" + n2 + "]");
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("move",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // move ::= ID L_SQUARE NUMBER R_SQUARE A_ASSIGN ID range 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cycleDescription += id1 + "[" + n + "]" + " <- " + id2 + parser.cycleDescriptionRange;
			RESULT = "            mCPU.mComponentsList[" + id1 + "].set_value(" + n + ", mCPU.mComponentsList[" + id2 + "].get_value(" + r + "))";
			parser.sameTimeMoves.add(id1 + "[" + n + "]" + " <- " + id2 + r);
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("move",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // move ::= ID L_SQUARE NUMBER HYPHEN NUMBER R_SQUARE A_ASSIGN ID range 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cycleDescription += id1 + "[" + n1 + "-" + n2 + "]" + " <- " + id2 + parser.cycleDescriptionRange;
			RESULT = "            mCPU.mComponentsList[" + id1 + "].set_value(" + n1 + ", " + n2 + ", mCPU.mComponentsList[" + id2 + "].get_value(" + r + "))";
			parser.sameTimeMoves.add(id1 + "[" + n1 + "-" + n2 + "]" + " <- " + id2 + r);
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("move",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // component_command ::= SET 
            {
              String RESULT =null;
		 parser.cycleDescription += ".set"; RESULT = ".set()"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("component_command",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // component_command ::= CLEAR 
            {
              String RESULT =null;
		 parser.cycleDescription += ".clr"; RESULT = ".clear()"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("component_command",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // component_command ::= INCREMENT 
            {
              String RESULT =null;
		 parser.cycleDescription += ".inc"; RESULT = ".increment()"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("component_command",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // component_command ::= COMPLEMENT 
            {
              String RESULT =null;
		 parser.cycleDescription += ".cmp"; RESULT = ".complement()"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("component_command",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // u_op ::= HLT 
            {
              String RESULT =null;
		 parser.cycleDescription += "hlt"; RESULT = "            mCPU.halt();\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("u_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // u_op ::= END 
            {
              String RESULT =null;
		 parser.cycleDescription += "end"; RESULT = "            mCPU.resetTimer();\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("u_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // u_op ::= asign_op_code 
            {
              String RESULT =null;
		int aocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aocright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String aoc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = aoc + ";\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("u_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // u_op ::= move 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = m + ";\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("u_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // u_op ::= alu_command 
            {
              String RESULT =null;
		int acleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ac = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ac + ";\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("u_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // u_op ::= IF L_BRACKET NT$6 condition_list R_BRACKET L_CURLY NT$7 u_op_list R_CURLY 
            {
              String RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String cl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int uolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uolright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String uol = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
			parser.cycleDescription += " }";
			RESULT = "            if (" + cl + "){\n    " + uol + "            }\n";
			if (parser.sameTimeMoves.size() > 1) {
			  String message = "WARNING: The use of " + Arrays.toString(parser.sameTimeMoves.toArray(new String[parser.sameTimeMoves.size()])) + " at the same time might be problematic.";
			  JOptionPane.showMessageDialog(null, message);
			}
			parser.sameTimeMoves.clear();
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("u_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$7 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String cl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 parser.cycleDescription += parser.cycleDescriptionCondition + ") { "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$6 ::= 
            {
              String RESULT =null;
 parser.cycleDescriptionCondition = ""; parser.cycleDescription += "if("; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // u_op ::= ID NT$5 component_command 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "            mCPU.mComponentsList[" + id + "]" + cc + ";\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("u_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$5 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 parser.cycleDescription += id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // u_op_list ::= u_op 
            {
              String RESULT =null;
		int uoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String uo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = uo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("u_op_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // u_op_list ::= u_op_list COMMA NT$4 u_op 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int uolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int uolright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String uol = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int uoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String uo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = uol + uo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("u_op_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$4 ::= 
            {
              String RESULT =null;
		int uolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uolright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String uol = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 parser.cycleDescription += ", "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // condition ::= OPCODE L_BRACKET NUMBER R_BRACKET 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cycleDescriptionCondition += "opcode(" + n + ")"; RESULT = "mCPU.checkOpCode(" + n + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // condition ::= ID CHANGED 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cycleDescriptionCondition += id + ".chn"; RESULT = "mCPU.mComponentsList[" + id + "].changed()"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condition ::= ID range 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.cycleDescriptionCondition += id + parser.cycleDescriptionRange; RESULT = "mCPU.mComponentsList[" + id + "].evaluateAsBoolean(" + r + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // condition_list ::= condition 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // condition_list ::= NOT NT$3 condition_list 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "!" + cl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$3 ::= 
            {
              String RESULT =null;
 parser.cycleDescriptionCondition += "!"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // condition_list ::= condition_list OR NT$2 condition_list 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cl1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cl1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String cl1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cl2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cl2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cl2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cl1 + " || " + cl2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$2 ::= 
            {
              String RESULT =null;
		int cl1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cl1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cl1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 parser.cycleDescriptionCondition += " || "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condition_list ::= condition_list AND NT$1 condition_list 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cl1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cl1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String cl1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cl2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cl2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cl2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cl1 + " && " + cl2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$1 ::= 
            {
              String RESULT =null;
		int cl1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cl1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cl1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 parser.cycleDescriptionCondition += " && "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // condition_list ::= L_BRACKET NT$0 condition_list R_BRACKET 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cycleDescriptionCondition += ")"; RESULT = "(" + cl + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$0 ::= 
            {
              String RESULT =null;
 parser.cycleDescriptionCondition += "("; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // command ::= CYCLE NUMBER L_BRACKET condition_list R_BRACKET COLON u_op_list SEMICOLON 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String cl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int uolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uolright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String uol = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if (parser.timestampsCode[n] != null) { parser.timestampsCode[n] += "        if (" + cl + "){\n            mCycleDescription = \"" + parser.cycleDescription + "\";\n" + uol + "        }\n"; } else { parser.timestampsCode[n] = "        if (" + cl + "){\n            mCycleDescription = \"" + parser.cycleDescription + "\";\n" + uol + "        }\n";}
			   if (parser.sameTimeMoves.size() > 1) {
				 String message = "WARNING: The use of " + Arrays.toString(parser.sameTimeMoves.toArray(new String[parser.sameTimeMoves.size()])) + " at the same time might be problematic.";
				 JOptionPane.showMessageDialog(null, message);
			   }
			   parser.sameTimeMoves.clear();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // command_list ::= command 
            {
              Object RESULT =null;
		 parser.cycleDescription = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // command_list ::= command_list command 
            {
              Object RESULT =null;
		 parser.cycleDescription = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // u_code ::= CODE L_CURLY command_list R_CURLY 
            {
              Object RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.print_to_instructions_file(parser.get_instructions_file_code()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("u_code",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // element ::= AM 
            {
              String RESULT =null;
		 RESULT = "am"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("element",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // element ::= TAG 
            {
              String RESULT =null;
		 RESULT = "\"<\" + tag + \">\""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("element",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // element ::= OPCODE L_TRIANGULAR NUMBER R_TRIANGULAR L_BRACKET NUMBER R_BRACKET 
            {
              String RESULT =null;
		int bitsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bitsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer bits = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "new Value(" + bits + ", " + val + ").toString()"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("element",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // element_list ::= element 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("element_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // element_list ::= element_list element 
            {
              String RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = el + " + " +  e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("element_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // command_format ::= ID F_ASSIGN STRINGVAL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 String line = "if (command.equals(\"" + id + "\")) { line += new Value(\"" + str + "\").toString(); }"; parser.staticCommands.add(line); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_format",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // command_format ::= ID F_ASSIGN element_list 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 String line = "if (command.equals(\"" + id + "\")) { line += " + el + "; }"; parser.dinamicCommands.add(line); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_format",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // command_format_list ::= command_format 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_format_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // command_format_list ::= command_format_list command_format 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_format_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // access_mode ::= L_SQUARE R_SQUARE E_ASSIGN STRINGVAL 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.noAccessMode = str; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("access_mode",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // access_mode ::= L_SQUARE ID R_SQUARE E_ASSIGN STRINGVAL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 String line = "if (id.equals(\"" + id + "\")) { parser.accessMode = \"" + id + "\"; RESULT = \"" + str + "\"; }"; parser.accessModes.add(line); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("access_mode",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // access_modes_list ::= access_mode 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("access_modes_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // access_modes_list ::= access_modes_list COMMA access_mode 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("access_modes_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // access_modes ::= ACCESSMODES L_TRIANGULAR access_modes_list R_TRIANGULAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("access_modes",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // format ::= FORMAT L_CURLY access_modes command_format_list R_CURLY 
            {
              Object RESULT =null;
		 parser.print_to_assembler_file(parser.get_assembler_file_code()); parser.print_assembler_class(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("format",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // system ::= u_code format 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("system",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // system ::= format u_code 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("system",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // epsilon ::= 
            {
              Object RESULT =null;
		 /* Empty statement*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("epsilon",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= system EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

